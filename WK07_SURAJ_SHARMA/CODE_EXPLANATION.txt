CRUD Operation React App

1. Table Structure:
   - The table has two columns: ID and Post Title.

   ```jsx
   // Table Structure
   <Table>
     <TableHead>
       <TableRow>
         <TableCell>ID</TableCell>
         <TableCell>Post Title</TableCell>
         <TableCell>Action</TableCell>
       </TableRow>
     </TableHead>
     <TableBody>
       {/* Rows dynamically rendered based on tableData */}
       {tableData.map((row) => (
         <TableRow key={row.id}>
           <TableCell>{row.id}</TableCell>
           <TableCell>{row.title}</TableCell>
           <TableCell>
             {/* Buttons for Edit and Delete */}
             <Button variant="contained" color="primary" onClick={() => editRow(row.id, row.title)} style={{ marginRight: 10 }}>
               Edit
             </Button>
             <Button variant="contained" color="secondary" onClick={() => deleteRow(row.id)}>
               Delete
             </Button>
           </TableCell>
         </TableRow>
       ))}
     </TableBody>
   </Table>
Add Elements to the Table:

Users can add elements to the table by selecting an ID from the provided API and fetching the corresponding title.
Implemented using Autocomplete and a button for adding to the table.

// Add Elements to the Table
<Autocomplete
  options={posts}
  getOptionLabel={(post) => `${post.id} - ${post.title}`}
  style={{ width: 300 }}
  renderInput={(params) => <TextField {...params} label="Select ID" variant="outlined" />}
  onChange={(event, value) => setPostIdInput(value ? value.id : '')}
/>
<Button variant="contained" color="primary" onClick={fetchAndAdd} style={{ marginTop: 10 }}>
  Add to Table
</Button>


Edit Functionality:

Users can edit the title of existing rows in the table.
Implemented using a dialog/modal with a text field for editing the title.

// Edit Functionality
<Dialog open={editDialogOpen} onClose={handleEditDialogClose} fullWidth maxWidth="sm">
  <DialogTitle>Edit Title</DialogTitle>
  <DialogContent>
    <TextField
      label="New Title"
      variant="outlined"
      fullWidth
      value={editTitle}
      onChange={(e) => setEditTitle(e.target.value)}
    />
  </DialogContent>
  <DialogActions>
    <Button onClick={handleEditDialogClose} color="primary">
      Cancel
    </Button>
    <Button onClick={handleEditSave} color="primary">
      Save
    </Button>
  </DialogActions>
</Dialog>


Delete Functionality:

Users can delete rows from the table.
Implemented using a button for each row.

// Delete Functionality
<Button variant="contained" color="secondary" onClick={() => deleteRow(row.id)}>
  Delete
</Button>

Fetching Data from API:

Data is fetched from the JSONPlaceholder API to populate the initial list of posts.

// Fetching Data from API
useEffect(() => {
  fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => response.json())
    .then(data => setPosts(data))
    .catch(error => console.error('Error fetching data:', error));
}, []);
